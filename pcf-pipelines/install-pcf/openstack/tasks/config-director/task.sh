#!/bin/bash
set -e

# Set CA Cert for self-signed certs
if [ -n "$API_SSL_CERT" ]; then
  echo "$API_SSL_CERT" > /ca.crt
  export OS_CACERT='/ca.crt'
fi

function fn_get_azs {
     local azs_csv=$1
     echo $azs_csv | jq --raw-input 'split(",")'
}

# Networks are generated by the pipeline which means GUIDs are not known
# until runtime.
function get_network_guid() {
  local NET=$1
  openstack network show $NET -c id -f value
}

# Convert OS_IDENTITY_API_VERSION to a string Ops Man understands
if echo $OS_IDENTITY_API_VERSION | grep --quiet 3; then
    OS_API_VERSION="v3.0"
else
    OS_API_VERSION="v2.0"
fi

set +e
read -r -d '' iaas_configuration <<EOF
{
  "iaas_configuration": {
    "identity_endpoint": "$OS_AUTH_URL",
    "username": "$OS_USERNAME",
    "password": "$OS_PASSWORD",
    "keystone_version": "$OS_API_VERSION",
    "domain": "$OS_USER_DOMAIN_NAME",
    "tenant": "$OS_TENANT",
    "networking_model": "$OS_NETWORKING_MODEL",
    "security_group": "$SECURITY_GROUP",
    "key_pair_name": "$KEYPAIR_NAME",
    "ssh_private_key": "",
    "region": "$OS_REGION_NAME",
    "ignore_server_availability_zone": $IGNORE_SERVER_AZ,
    "disable_dhcp": $DISABLE_DHCP,
    "api_ssl_cert": ""
  }
}
EOF

read -r -d '' director_configuration <<EOF
{
  "ntp_servers_string": "$NTP_SERVERS",
  "metrics_ip": "$METRICS_IP",
  "resurrector_enabled": $RESURRECTOR_ENABLED,
  "max_threads": $MAX_THREADS,
  "database_type": "$BOSH_DATABASE_TYPE",
  "blobstore_type": "$BOSH_BLOBSTORE_TYPE"
}
EOF

read -r -d '' az_configuration <<EOF
{
  "availability_zones": [
    { "name": "$AZ_01_NAME" }
  ]
}
EOF

INFRA_AZS=$(fn_get_azs "$INFRA_NW_AZS")
ERT_AZS=$(fn_get_azs "$ERT_NW_AZS")
SERVICES_AZS=$(fn_get_azs "$SERVICES_NW_AZS")
DYNAMIC_SERVICES_AZS=$(fn_get_azs "$DYNAMIC_SERVICES_NW_AZS")

read -r -d '' networks_configuration <<EOF
{
  "icmp_checks_enabled": $ICMP_CHECKS_ENABLED,
  "networks": [
    {
      "name": "$INFRA_NETWORK",
      "subnets": [{
        "iaas_identifier": "$(get_network_guid $INFRA_NETWORK)",
        "cidr": "$INFRA_SUBNET",
        "reserved_ip_ranges": "$INFRA_RESERVED_IP_RANGES",
        "dns": "$INFRA_DNS",
        "gateway": "$INFRA_GATEWAY",
        "availability_zones": $INFRA_AZS
      }]
    },
    {
      "name": "$ERT_NETWORK",
      "subnets": [{
        "iaas_identifier": "$(get_network_guid $ERT_NETWORK)",
        "cidr": "$ERT_SUBNET",
        "reserved_ip_ranges": "$ERT_RESERVED_IP_RANGES",
        "dns": "$ERT_DNS",
        "gateway": "$ERT_GATEWAY",
        "availability_zones": $ERT_AZS
      }]
    },

    {
      "name": "$SERVICES_NETWORK",
      "subnets": [{
        "iaas_identifier": "$(get_network_guid $SERVICES_NETWORK)",
        "cidr": "$SERVICES_SUBNET",
        "reserved_ip_ranges": "$SERVICES_RESERVED_IP_RANGES",
        "dns": "$SERVICES_DNS",
        "gateway": "$SERVICES_GATEWAY",
        "availability_zones": $SERVICES_AZS
      }]
    },
    {
      "name": "$DYNAMIC_SERVICES_NETWORK",
      "service_network": true,
      "subnets": [{
        "iaas_identifier": "$(get_network_guid $DYNAMIC_SERVICES_NETWORK)",
        "cidr": "$DYNAMIC_SERVICES_SUBNET",
        "reserved_ip_ranges": "$DYNAMIC_SERVICES_RESERVED_IP_RANGES",
        "dns": "$DYNAMIC_SERVICES_DNS",
        "gateway": "$DYNAMIC_SERVICES_GATEWAY",
        "availability_zones": $DYNAMIC_SERVICES_AZS
      }]
    }
  ]
}
EOF

read -r -d '' network_assignment <<EOF
{
  "singleton_availability_zone": "$AZ_01_NAME",
  "network": "$INFRA_NETWORK"
}
EOF

set -e

security_configuration=$(
  echo "{}" |
  jq \
    --arg trusted_certificates "$TRUSTED_CERTIFICATES" \
    --arg vm_password_type "$VM_PASSWORD_TYPE" \
    '. +
    {
      "trusted_certificates": $trusted_certificates,
      "vm_password_type": $vm_password_type
    }
    '
)

iaas_configuration=$(
  echo "$iaas_configuration" |
  jq --arg ssh_private_key "$PRIVATE_KEY" '.iaas_configuration.ssh_private_key = $ssh_private_key'
)

iaas_configuration=$(
  echo "$iaas_configuration" |
  jq --arg api_ssl_cert "$API_SSL_CERT" '.iaas_configuration.api_ssl_cert = $api_ssl_cert'
)

jsons=(
  "$iaas_configuration"
  "$director_configuration"
  "$az_configuration"
  "$networks_configuration"
  "$security_configuration"
  "$network_assignment"
  "$security_configuration"
)

echo "Configuring IaaS..."

om-linux \
  --target https://$OPSMAN_URI \
  --skip-ssl-validation \
  --username "$OPSMAN_USERNAME" \
  --password "$OPSMAN_PASSWORD" \
  curl \
  -x PUT \
  -d "$iaas_configuration" \
  -p "/api/v0/staged/director/properties"

echo "Configuring Ops Manager Director..."

om-linux \
  --target https://$OPSMAN_URI \
  --skip-ssl-validation \
  --username "$OPSMAN_USERNAME" \
  --password "$OPSMAN_PASSWORD" \
  configure-bosh \
  --director-configuration "$director_configuration" \
  --az-configuration "$az_configuration" \
  --networks-configuration "$networks_configuration" \
  --network-assignment "$network_assignment" \
  --security-configuration "$security_configuration"
