// Code generated by counterfeiter. DO NOT EDIT.
package migrationfakes

import (
	"io"
	"sync"

	"github.com/concourse/atc/db/migration"
	"github.com/mattes/migrate/database"
)

type FakeDriver struct {
	OpenStub        func(url string) (database.Driver, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		url string
	}
	openReturns struct {
		result1 database.Driver
		result2 error
	}
	openReturnsOnCall map[int]struct {
		result1 database.Driver
		result2 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	LockStub        func() error
	lockMutex       sync.RWMutex
	lockArgsForCall []struct{}
	lockReturns     struct {
		result1 error
	}
	lockReturnsOnCall map[int]struct {
		result1 error
	}
	UnlockStub        func() error
	unlockMutex       sync.RWMutex
	unlockArgsForCall []struct{}
	unlockReturns     struct {
		result1 error
	}
	unlockReturnsOnCall map[int]struct {
		result1 error
	}
	RunStub        func(migration io.Reader) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		migration io.Reader
	}
	runReturns struct {
		result1 error
	}
	runReturnsOnCall map[int]struct {
		result1 error
	}
	SetVersionStub        func(version int, dirty bool) error
	setVersionMutex       sync.RWMutex
	setVersionArgsForCall []struct {
		version int
		dirty   bool
	}
	setVersionReturns struct {
		result1 error
	}
	setVersionReturnsOnCall map[int]struct {
		result1 error
	}
	VersionStub        func() (version int, dirty bool, err error)
	versionMutex       sync.RWMutex
	versionArgsForCall []struct{}
	versionReturns     struct {
		result1 int
		result2 bool
		result3 error
	}
	versionReturnsOnCall map[int]struct {
		result1 int
		result2 bool
		result3 error
	}
	DropStub        func() error
	dropMutex       sync.RWMutex
	dropArgsForCall []struct{}
	dropReturns     struct {
		result1 error
	}
	dropReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDriver) Open(url string) (database.Driver, error) {
	fake.openMutex.Lock()
	ret, specificReturn := fake.openReturnsOnCall[len(fake.openArgsForCall)]
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		url string
	}{url})
	fake.recordInvocation("Open", []interface{}{url})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(url)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.openReturns.result1, fake.openReturns.result2
}

func (fake *FakeDriver) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeDriver) OpenArgsForCall(i int) string {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.openArgsForCall[i].url
}

func (fake *FakeDriver) OpenReturns(result1 database.Driver, result2 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 database.Driver
		result2 error
	}{result1, result2}
}

func (fake *FakeDriver) OpenReturnsOnCall(i int, result1 database.Driver, result2 error) {
	fake.OpenStub = nil
	if fake.openReturnsOnCall == nil {
		fake.openReturnsOnCall = make(map[int]struct {
			result1 database.Driver
			result2 error
		})
	}
	fake.openReturnsOnCall[i] = struct {
		result1 database.Driver
		result2 error
	}{result1, result2}
}

func (fake *FakeDriver) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.closeReturns.result1
}

func (fake *FakeDriver) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeDriver) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) CloseReturnsOnCall(i int, result1 error) {
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) Lock() error {
	fake.lockMutex.Lock()
	ret, specificReturn := fake.lockReturnsOnCall[len(fake.lockArgsForCall)]
	fake.lockArgsForCall = append(fake.lockArgsForCall, struct{}{})
	fake.recordInvocation("Lock", []interface{}{})
	fake.lockMutex.Unlock()
	if fake.LockStub != nil {
		return fake.LockStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.lockReturns.result1
}

func (fake *FakeDriver) LockCallCount() int {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return len(fake.lockArgsForCall)
}

func (fake *FakeDriver) LockReturns(result1 error) {
	fake.LockStub = nil
	fake.lockReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) LockReturnsOnCall(i int, result1 error) {
	fake.LockStub = nil
	if fake.lockReturnsOnCall == nil {
		fake.lockReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.lockReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) Unlock() error {
	fake.unlockMutex.Lock()
	ret, specificReturn := fake.unlockReturnsOnCall[len(fake.unlockArgsForCall)]
	fake.unlockArgsForCall = append(fake.unlockArgsForCall, struct{}{})
	fake.recordInvocation("Unlock", []interface{}{})
	fake.unlockMutex.Unlock()
	if fake.UnlockStub != nil {
		return fake.UnlockStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unlockReturns.result1
}

func (fake *FakeDriver) UnlockCallCount() int {
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	return len(fake.unlockArgsForCall)
}

func (fake *FakeDriver) UnlockReturns(result1 error) {
	fake.UnlockStub = nil
	fake.unlockReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) UnlockReturnsOnCall(i int, result1 error) {
	fake.UnlockStub = nil
	if fake.unlockReturnsOnCall == nil {
		fake.unlockReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unlockReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) Run(migration io.Reader) error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		migration io.Reader
	}{migration})
	fake.recordInvocation("Run", []interface{}{migration})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(migration)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.runReturns.result1
}

func (fake *FakeDriver) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeDriver) RunArgsForCall(i int) io.Reader {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].migration
}

func (fake *FakeDriver) RunReturns(result1 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) RunReturnsOnCall(i int, result1 error) {
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) SetVersion(version int, dirty bool) error {
	fake.setVersionMutex.Lock()
	ret, specificReturn := fake.setVersionReturnsOnCall[len(fake.setVersionArgsForCall)]
	fake.setVersionArgsForCall = append(fake.setVersionArgsForCall, struct {
		version int
		dirty   bool
	}{version, dirty})
	fake.recordInvocation("SetVersion", []interface{}{version, dirty})
	fake.setVersionMutex.Unlock()
	if fake.SetVersionStub != nil {
		return fake.SetVersionStub(version, dirty)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setVersionReturns.result1
}

func (fake *FakeDriver) SetVersionCallCount() int {
	fake.setVersionMutex.RLock()
	defer fake.setVersionMutex.RUnlock()
	return len(fake.setVersionArgsForCall)
}

func (fake *FakeDriver) SetVersionArgsForCall(i int) (int, bool) {
	fake.setVersionMutex.RLock()
	defer fake.setVersionMutex.RUnlock()
	return fake.setVersionArgsForCall[i].version, fake.setVersionArgsForCall[i].dirty
}

func (fake *FakeDriver) SetVersionReturns(result1 error) {
	fake.SetVersionStub = nil
	fake.setVersionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) SetVersionReturnsOnCall(i int, result1 error) {
	fake.SetVersionStub = nil
	if fake.setVersionReturnsOnCall == nil {
		fake.setVersionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setVersionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) Version() (version int, dirty bool, err error) {
	fake.versionMutex.Lock()
	ret, specificReturn := fake.versionReturnsOnCall[len(fake.versionArgsForCall)]
	fake.versionArgsForCall = append(fake.versionArgsForCall, struct{}{})
	fake.recordInvocation("Version", []interface{}{})
	fake.versionMutex.Unlock()
	if fake.VersionStub != nil {
		return fake.VersionStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.versionReturns.result1, fake.versionReturns.result2, fake.versionReturns.result3
}

func (fake *FakeDriver) VersionCallCount() int {
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	return len(fake.versionArgsForCall)
}

func (fake *FakeDriver) VersionReturns(result1 int, result2 bool, result3 error) {
	fake.VersionStub = nil
	fake.versionReturns = struct {
		result1 int
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDriver) VersionReturnsOnCall(i int, result1 int, result2 bool, result3 error) {
	fake.VersionStub = nil
	if fake.versionReturnsOnCall == nil {
		fake.versionReturnsOnCall = make(map[int]struct {
			result1 int
			result2 bool
			result3 error
		})
	}
	fake.versionReturnsOnCall[i] = struct {
		result1 int
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDriver) Drop() error {
	fake.dropMutex.Lock()
	ret, specificReturn := fake.dropReturnsOnCall[len(fake.dropArgsForCall)]
	fake.dropArgsForCall = append(fake.dropArgsForCall, struct{}{})
	fake.recordInvocation("Drop", []interface{}{})
	fake.dropMutex.Unlock()
	if fake.DropStub != nil {
		return fake.DropStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.dropReturns.result1
}

func (fake *FakeDriver) DropCallCount() int {
	fake.dropMutex.RLock()
	defer fake.dropMutex.RUnlock()
	return len(fake.dropArgsForCall)
}

func (fake *FakeDriver) DropReturns(result1 error) {
	fake.DropStub = nil
	fake.dropReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) DropReturnsOnCall(i int, result1 error) {
	fake.DropStub = nil
	if fake.dropReturnsOnCall == nil {
		fake.dropReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.dropReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.setVersionMutex.RLock()
	defer fake.setVersionMutex.RUnlock()
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	fake.dropMutex.RLock()
	defer fake.dropMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDriver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ migration.Driver = new(FakeDriver)
