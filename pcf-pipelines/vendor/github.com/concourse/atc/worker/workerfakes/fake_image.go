// Code generated by counterfeiter. DO NOT EDIT.
package workerfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc/db"
	"github.com/concourse/atc/worker"
)

type FakeImage struct {
	FetchForContainerStub        func(ctx context.Context, logger lager.Logger, container db.CreatingContainer) (worker.FetchedImage, error)
	fetchForContainerMutex       sync.RWMutex
	fetchForContainerArgsForCall []struct {
		ctx       context.Context
		logger    lager.Logger
		container db.CreatingContainer
	}
	fetchForContainerReturns struct {
		result1 worker.FetchedImage
		result2 error
	}
	fetchForContainerReturnsOnCall map[int]struct {
		result1 worker.FetchedImage
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImage) FetchForContainer(ctx context.Context, logger lager.Logger, container db.CreatingContainer) (worker.FetchedImage, error) {
	fake.fetchForContainerMutex.Lock()
	ret, specificReturn := fake.fetchForContainerReturnsOnCall[len(fake.fetchForContainerArgsForCall)]
	fake.fetchForContainerArgsForCall = append(fake.fetchForContainerArgsForCall, struct {
		ctx       context.Context
		logger    lager.Logger
		container db.CreatingContainer
	}{ctx, logger, container})
	fake.recordInvocation("FetchForContainer", []interface{}{ctx, logger, container})
	fake.fetchForContainerMutex.Unlock()
	if fake.FetchForContainerStub != nil {
		return fake.FetchForContainerStub(ctx, logger, container)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fetchForContainerReturns.result1, fake.fetchForContainerReturns.result2
}

func (fake *FakeImage) FetchForContainerCallCount() int {
	fake.fetchForContainerMutex.RLock()
	defer fake.fetchForContainerMutex.RUnlock()
	return len(fake.fetchForContainerArgsForCall)
}

func (fake *FakeImage) FetchForContainerArgsForCall(i int) (context.Context, lager.Logger, db.CreatingContainer) {
	fake.fetchForContainerMutex.RLock()
	defer fake.fetchForContainerMutex.RUnlock()
	return fake.fetchForContainerArgsForCall[i].ctx, fake.fetchForContainerArgsForCall[i].logger, fake.fetchForContainerArgsForCall[i].container
}

func (fake *FakeImage) FetchForContainerReturns(result1 worker.FetchedImage, result2 error) {
	fake.FetchForContainerStub = nil
	fake.fetchForContainerReturns = struct {
		result1 worker.FetchedImage
		result2 error
	}{result1, result2}
}

func (fake *FakeImage) FetchForContainerReturnsOnCall(i int, result1 worker.FetchedImage, result2 error) {
	fake.FetchForContainerStub = nil
	if fake.fetchForContainerReturnsOnCall == nil {
		fake.fetchForContainerReturnsOnCall = make(map[int]struct {
			result1 worker.FetchedImage
			result2 error
		})
	}
	fake.fetchForContainerReturnsOnCall[i] = struct {
		result1 worker.FetchedImage
		result2 error
	}{result1, result2}
}

func (fake *FakeImage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchForContainerMutex.RLock()
	defer fake.fetchForContainerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.Image = new(FakeImage)
